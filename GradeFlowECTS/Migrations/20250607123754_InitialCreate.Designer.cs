// <auto-generated />
using System;
using GradeFlowECTS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GradeFlowECTS.Migrations
{
    [DbContext(typeof(GradeFlowContext))]
    [Migration("20250607123754_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GradeFlowECTS.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"));

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisciplineId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("OpenDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<int>("OwnerTeacherId")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("OwnerTeacherId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.ExamPractice", b =>
                {
                    b.Property<int>("ExamPracticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamPracticeId"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<byte?>("ExamPracticeNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("ExamPracticeText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamPracticeId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("ExamPractices");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.ExamTest", b =>
                {
                    b.Property<int>("ExamTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamTestId"));

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeToComplete")
                        .HasColumnType("int");

                    b.Property<byte>("TotalPoints")
                        .HasColumnType("tinyint");

                    b.HasKey("ExamTestId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamTests");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<byte>("CourseNumber")
                        .HasColumnType("tinyint");

                    b.Property<byte>("GroupNumber")
                        .HasColumnType("tinyint");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.GroupsExam", b =>
                {
                    b.Property<int>("GroupExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupExamId"));

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupExamId");

                    b.HasIndex("ExamId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsExams");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.QualificationExamScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Number")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Score")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("QualificationExamScores");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("ExamTestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExamTestId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionAnswerId"));

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionAnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("QuestionAnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTypeId"));

                    b.Property<string>("QuestionTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.StudentAttempt", b =>
                {
                    b.Property<int>("StudentAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAttemptId"));

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("RemainingAttempts")
                        .HasColumnType("tinyint");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentAttemptId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAttempts");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.StudentExamResult", b =>
                {
                    b.Property<int>("StudentExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentExamId"));

                    b.Property<DateOnly?>("DateEnded")
                        .HasColumnType("date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("PracticeGrade")
                        .HasColumnType("tinyint");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<byte?>("TestGrade")
                        .HasColumnType("tinyint");

                    b.Property<TimeOnly?>("TestTimeSpent")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeOnly?>("TimeEnded")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.HasKey("StudentExamId")
                        .HasName("PK_StudentExam");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExamResults");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.TopicsDiscipline", b =>
                {
                    b.Property<int>("TopicDisciplinesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicDisciplinesId"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicDisciplinesId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("TopicsDisciplines");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.TopicsExamTest", b =>
                {
                    b.Property<int>("TopicExamTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicExamTestId"));

                    b.Property<int>("ExamTestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("TopicExamTestId");

                    b.HasIndex("ExamTestId");

                    b.ToTable("TopicsExamTest", (string)null);
                });

            modelBuilder.Entity("GradeFlowECTS.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Exam", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Discipline", "Discipline")
                        .WithMany("Exams")
                        .HasForeignKey("DisciplineId")
                        .IsRequired()
                        .HasConstraintName("FK_Exams_Disciplines");

                    b.HasOne("GradeFlowECTS.Models.Teacher", "OwnerTeacher")
                        .WithMany("Exams")
                        .HasForeignKey("OwnerTeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Exams_Teachers");

                    b.Navigation("Discipline");

                    b.Navigation("OwnerTeacher");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.ExamPractice", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Discipline", "Discipline")
                        .WithMany("ExamPractices")
                        .HasForeignKey("DisciplineId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamPractices_Disciplines");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.ExamTest", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Exam", "Exam")
                        .WithMany("ExamTests")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamTests_Exams1");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.GroupsExam", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Exam", "Exam")
                        .WithMany("GroupsExams")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupsExams_Exams");

                    b.HasOne("GradeFlowECTS.Models.Group", "Group")
                        .WithMany("GroupsExams")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupsExams_Groups1");

                    b.Navigation("Exam");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Question", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.ExamTest", "ExamTest")
                        .WithMany("Questions")
                        .HasForeignKey("ExamTestId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_ExamTests");

                    b.HasOne("GradeFlowECTS.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_QuestionTypes");

                    b.HasOne("GradeFlowECTS.Models.TopicsDiscipline", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_TopicsDisciplines");

                    b.Navigation("ExamTest");

                    b.Navigation("QuestionType");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.QuestionAnswer", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionAnswers_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Student", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Groups1");

                    b.HasOne("GradeFlowECTS.Models.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Users");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.StudentAttempt", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Exam", "Exam")
                        .WithMany("StudentAttempts")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAttempts_Exams");

                    b.HasOne("GradeFlowECTS.Models.Student", "Student")
                        .WithMany("StudentAttempts")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAttempts_Students");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.StudentExamResult", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Exam", "Exam")
                        .WithMany("StudentExamResults")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentExam_Exams");

                    b.HasOne("GradeFlowECTS.Models.Student", "Student")
                        .WithMany("StudentExamResults")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentExam_Students");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Teacher", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.TopicsDiscipline", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.Discipline", "Discipline")
                        .WithMany("TopicsDisciplines")
                        .HasForeignKey("DisciplineId")
                        .IsRequired()
                        .HasConstraintName("FK_TopicsDisciplines_Disciplines");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.TopicsExamTest", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.ExamTest", "ExamTest")
                        .WithMany("TopicsExamTests")
                        .HasForeignKey("ExamTestId")
                        .IsRequired()
                        .HasConstraintName("FK_TopicsExamTest_TopicsExamTest");

                    b.Navigation("ExamTest");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.User", b =>
                {
                    b.HasOne("GradeFlowECTS.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserRoles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Discipline", b =>
                {
                    b.Navigation("ExamPractices");

                    b.Navigation("Exams");

                    b.Navigation("TopicsDisciplines");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Exam", b =>
                {
                    b.Navigation("ExamTests");

                    b.Navigation("GroupsExams");

                    b.Navigation("StudentAttempts");

                    b.Navigation("StudentExamResults");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.ExamTest", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TopicsExamTests");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Group", b =>
                {
                    b.Navigation("GroupsExams");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Question", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Student", b =>
                {
                    b.Navigation("StudentAttempts");

                    b.Navigation("StudentExamResults");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.Teacher", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.TopicsDiscipline", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("GradeFlowECTS.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
