using System.Security.Cryptography;
using System.Text;
using System.Windows;
using GradeFlowECTS.Infrastructure;
using Microsoft.EntityFrameworkCore;

namespace GradeFlowECTS.View.Windows
{
    public partial class StudentPracticeResultWindow : Window
    {
        public StudentPracticeResultWindow(int resultId)
        {
            InitializeComponent();
            List<(byte Number, string TaskText)> _tasks0101 = new()
            {
                (1, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Вывести все содержащиеся в данном массиве нечетные числа в порядке возрастания их индексов, а также их количество K."),
                (2, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Вывести вначале все содержащиеся в данном массиве четные числа в порядке возрастания их индексов, а затем — все нечетные числа в порядке убывания их индексов."),
                (3, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Ввести с клавиатуры целые числа K и L (1 < K ≤ L ≤ N). Найти сумму всех элементов массива, кроме элементов с номерами от K до L включительно."),
                (4, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Ввести с клавиатуры целые числа K и L (1 < K ≤ L ≤ N). Найти среднее арифметическое всех элементов массива, кроме элементов с номерами от K до L включительно."),
                (5, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Найти номера тех элементов массива, которые больше своего правого соседа, и количество таких элементов. Найденные номера выводить в порядке их возрастания. Нельзя использовать существующие методы сортировки."),
                (6, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Найти номера тех элементов массива, которые больше своего левого соседа, и количество таких элементов. Найденные номера выводить в порядке их убывания. Нельзя использовать существующие методы сортировки."),
                (7, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Упорядочить его по возрастанию методом сортировки простым обменом («пузырьковой» сортировкой): просматривать массив, сравнивая его соседние элементы (A1 и A2, A2 и A3 и т. д.) и меняя их местами, если левый элемент пары больше правого; повторить описанные действия N − 1 раз. Для контроля за выполняемыми действиями выводить содержимое массива после каждого просмотра. Учесть, что при каждом просмотре количество анализируемых пар можно уменьшить на 1."),

                (8, "Запросить ввод М и N - размеры матрицы. Запросить ввод, где K - целое число (1 ≤ K ≤ M). Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Вывести элементы K-й строки данной матрицы."),
                (9, "Запросить ввод М и N - размеры матрицы. Запросить ввод, где K - целое число (1 ≤ K ≤ N). Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Вывести элементы K-го столбца данной матрицы."),

                (10, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Вывести все чётные числа в порядке возрастания их индексов, а затем все нечётные числа в порядке убывания их индексов."),
                (11, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Найти и вывести минимальный и максимальный элементы массива, а также их индексы (если таких элементов несколько, вывести первые встретившиеся)."),
                (12, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Ввести с клавиатуры целые числа K и L (1 ≤ K ≤ L ≤ N). Найти сумму всех элементов массива с номерами от K до L включительно."),
                (13, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Ввести число X. Вывести количество элементов массива, кратных X, и их значения."),
                (14, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Заменить все четные элементы массива на нули и вывести измененный массив."),
                (15, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Найти среднее арифметическое всех положительных элементов массива."),
                (16, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Сформировать новый массив, исключив из исходного все элементы, кратные 3, и вывести его."),
                (17, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Найти два наименьших элемента массива и вывести их значения и индексы."),

                (18, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести число K (1 ≤ K ≤ M). Найти и вывести сумму элементов K-й строки."),
                (19, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести число K (1 ≤ K ≤ N). Найти и вывести среднее арифметическое элементов K-го столбца."),
                (20, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти строку с наибольшей суммой элементов и вывести её номер и сумму."),
                (21, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Транспонировать матрицу (строки <-> столбцы) и вывести результат."),
                (22, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести числа K и L (1 ≤ K, L ≤ M). Поменять местами строки K и L, затем вывести измененную матрицу."),
                (23, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести числа K и L (1 ≤ K, L ≤ N). Поменять местами столбцы K и L, затем вывести измененную матрицу."),
                (24, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Для каждого столбца найти и вывести максимальный элемент и его индекс строки."),
                (25, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти строку с максимальной суммой и строку с минимальной суммой."),
                (26, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Для каждой строки вывести количество положительных элементов."),
                (27, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти элемент, который является минимальным в своей строке. Вывести его значение и индексы."),
                (28, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти элемент, который является максимальным в своем столбце. Вывести его значение и индексы."),
                (29, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Поменять местами первую и последнюю строки матрицы и вывести результат."),
                (30, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Поменять местами первый и последний столбец матрицы и вывести результат."),
            };

            List<(byte Number, string TaskText)> _tasks0102 = new()
            {
                (1, "Разработать класс квадратное уравнение с соответствующим методом поиска корней. Разработать автоматизированные тесты для программы вычисления дискриминанта квадратного уравнения (В*В-4*А*С)."),
                (2, "Разработать класс график, с методом ВЫЧИСЛЕНИЯ ЗНАЧЕНИЙ ГРАФИКА ФУНКЦИИ У=1/(Х-4) НА ВВЕДЕННОМ ОТРЕЗКЕ [A,B] и автоматизированные тесты к методу."),
                (3, "Разработать тесты черным ящиком для программы: Считающей количество символов в заданном файле."),
                (4, "Разработать соответствующий класс Матрица и метод, считающую количество ненулевых элементов квадратной матрицы (0<n<10). Элементы матрицы от 10 до 20. Вся информация о размере и содержимом матрицы вводится с клавиатуры."),
                (5, "Разработать класс график, с методом ВЫЧИСЛЕНИЯ ЗНАЧЕНИЙ ГРАФИКА ГРАФИКА ФУНКЦИИ У=1/ НА ВВЕДЕННОМ ОТРЕЗКЕ [C,D]. Написать тесты входных данных на программу."),
                (6, "Разработать и описать класс, содержащий приватные поля, включающие информацию о имени файла, массиве с содержимым данного файла, методах чтения из файла в массив и вывода на консоль, проверки только ли числа в файле с возвратом значения логического типа и методом нахождения суммы если только числа в файле."),
                (7, "Разработать и описать родительский класс Человек с ФИО и адресом, метод info() для этого класса возвращает фио. Его подчиненный класс Студент с информацией о учебном заведении которое закончил - метод инфо возвращает строку с фио и названием учебного заведения, подчиненный класс для данного класса Преподаватель с названием ученой степени, и методами Инфо для каждого класса своими, использовать переопределение методов. Реализовать тесты к методу info()."),
                (8, "Разработать класс, содержащий приватные поля и методы работы с парами чисел А и В:\r\n-подсчет суммы А и В\r\n-возведение А в степень В\r\n-подсчет частного А и В\r\n-вывод на экран А раз числа В\r\nРазработать тесты к методам"),
                (9, "Разработать класс, содержащий методы работы со строками\r\n-подсчет слов\r\n-замена заглавных на строчные\r\n-подсчет количества букв.\r\nРазработать тесты к методам"),
                (10, "Разработать и создать класс треугольник, члены класса - длины 3-х сторон. Предусмотреть в классе методы проверки существования треугольника, вычисления и вывода сведений о фигуре – длины сторон, периметр, площадь. Разработать тесты к методам."),
                (11, "Реализовать класс Счет. Разработать автоматизированные тесты для программы, считающей сумму цифр во введенной строке."),
                (12, "Реализовать класс Счет. Разработать автоматизированные тесты для программы, считающей произведение цифр в строке, считанной из файла."),
                (13, "Разработать автоматизированные тесты для программы поиска минимального элемента в матрице, которая вводится с клавиатуры."),
                (14, "Создать класс, объектами с двумя переменными и знаком операции. Операциями могут быть +,-,/,*, ^(степень), хранимые в файле. Реализовать метод добавления данных в файл. Добавить функцию вывода на экран значений переменных и функцию вычисления операции над переменными и функцию которая находит наибольшее значение из этих двух переменных."),
                (15, "Создать класс реализующий следующие действия со строкой:\r\n● Возврат строки с разбиением на слова;\r\n● Подсчет количества слов в строке;\r\n● Проверка наличия зааданного слова.\r\n● Реализовать тесты."),
                (16, "Создайте класс,реализующий следующие действия с двумерным целочисленным\r\nмассивом:\r\n● инициализация, ввод элементов,\r\n● вывод элементов\r\n● нахождение суммы по строкам\r\n● Реализовать тесты."),
                (17, "Создайте классы, реализующие следующие действия с двумерным целочисленным массивом:\r\n● класс Робот-базовый класс\r\n○ метод Счет\r\n○ входные данные метода - строка с примером на сложение или вычитание,\r\n○ вида 3+4 или 5-6 выходное данное- число int\r\n● наследник от базового класс СуперРобот\r\n○ Метод Счет Переопределен, на вход подается строка вида число1*число2\r\n(например 3*45 ) или число1/число 2 (63/ 9) результат int\r\n● наследник от СуперРобот - класс СуперПуперРобот\r\nМетод Счет -переопределен может принимать строку с любым арифметическим\r\nвыражением, те такую, что может вычислить любую из 5 операций:\r\n● 1+2\r\n● 3-2\r\n● 3*4\r\n● 5/8\r\n● 13%3\r\nавтотесты к методам."),
                (18, "Создать класс четырехугольник, члены класса - координаты 4-х точек. Предусмотреть в классе вычисления и вывода сведений о фигуре - длины сторон, диагоналей, периметр,площадь. Создать производный класс прямоугольник, предусмотреть в классе проверку, является ли фигура прямоугольником. Реализовать тесты к методам.")
            };

            var context = new GradeFlowContext();
            var result = context.StudentExamResults.Find(resultId);
            var student = context.Students.Find(result.StudentId);
            var user = context.Users.Find(student.UserId);
            var temp = context.StudentExamResults.Include(r => r.Exam).ThenInclude(e => e.Discipline).FirstOrDefault(r => r.StudentExamId == resultId);
            DisciplineName.Text = LOL.Decrypt(temp?.Exam?.Discipline?.DisciplineName);
            InfoText.Text = $"{LOL.Decrypt(user.LastName)} {LOL.Decrypt(user.FirstName)} {result.DateEnded} {result.TimeEnded}";
            if(DisciplineName.Text == "МДК 01.01")
            {
                TaskText.Text = $"{result.TaskNumber}. " + _tasks0101.Where(t => t.Number == result.TaskNumber).Select(t => t.TaskText).FirstOrDefault();
            }
            else if(DisciplineName.Text == "МДК 01.02")
            {
                TaskText.Text = $"{result.TaskNumber}. " + _tasks0102.Where(t => t.Number == result.TaskNumber).Select(t => t.TaskText).FirstOrDefault();
            }
            CodeInput.Text = LOL.Decrypt(result.Mdkcode);
            ResultOutput.Text = LOL.Decrypt(result.Mdkcriteria);
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        static class LOL
        {
            private const int KeySize = 32;
            private const int IvSize = 12;
            private const int TagSize = 16;

            public static string Encrypt(string? plainText)
            {
                try
                {
                    if (plainText != null)
                    {
                        var key = "GradeFlowWPF" + ComplexComputation();
                        byte[] keyBytes = GetKey(key);
                        byte[] iv = new byte[IvSize];

                        using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
                        {
                            rng.GetBytes(iv);
                        }

                        using (AesGcm aes = new AesGcm(keyBytes, TagSize))
                        {
                            byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);
                            byte[] cipherBytes = new byte[plainBytes.Length];
                            byte[] tag = new byte[TagSize];

                            aes.Encrypt(iv, plainBytes, cipherBytes, tag);

                            byte[] encryptedData = new byte[IvSize + cipherBytes.Length + TagSize];
                            Array.Copy(iv, 0, encryptedData, 0, IvSize);
                            Array.Copy(cipherBytes, 0, encryptedData, IvSize, cipherBytes.Length);
                            Array.Copy(tag, 0, encryptedData, IvSize + cipherBytes.Length, TagSize);

                            return Convert.ToBase64String(encryptedData);
                        }
                    }
                    else
                    {
                        return null!;
                    }
                }
                catch (Exception)
                {
                    return null;
                }
            }

            public static string Decrypt(string? cipherText)
            {
                try
                {
                    if (cipherText != null)
                    {
                        var key = "GradeFlowWPF" + ComplexComputation();
                        byte[] keyBytes = GetKey(key);

                        cipherText = cipherText.PadRight(cipherText.Length + (4 - cipherText.Length % 4) % 4, '=');
                        byte[] cipherData = Convert.FromBase64String(cipherText);

                        byte[] iv = new byte[IvSize];
                        byte[] tag = new byte[TagSize];
                        byte[] cipherBytes = new byte[cipherData.Length - IvSize - TagSize];

                        Array.Copy(cipherData, 0, iv, 0, IvSize);
                        Array.Copy(cipherData, IvSize, cipherBytes, 0, cipherBytes.Length);
                        Array.Copy(cipherData, IvSize + cipherBytes.Length, tag, 0, TagSize);

                        using (AesGcm aes = new AesGcm(keyBytes, TagSize))
                        {
                            byte[] plainBytes = new byte[cipherBytes.Length];
                            aes.Decrypt(iv, cipherBytes, tag, plainBytes);
                            return Encoding.UTF8.GetString(plainBytes);
                        }
                    }
                    else
                    {
                        return null!;
                    }
                }
                catch (Exception)
                {
                    return null;
                }
            }

            private static byte[] GetKey(string key)
            {
                using (SHA256 sha256 = SHA256.Create())
                {
                    return sha256.ComputeHash(Encoding.UTF8.GetBytes(key));
                }
            }

            private static string ComplexComputation()
            {
                int[] values = { 1012, 3, 5, 7, 4 };
                int sum = 0;
                for (int i = 0; i < values.Length; i++)
                {
                    sum += values[i] * (i % 2 == 0 ? 2 : 3);
                }
                sum -= Fibonacci(5) * 10;
                sum += Factorial(3);
                return $"{sum}ects2025";
            }

            private static int Fibonacci(int n)
            {
                if (n <= 1) return n;
                return Fibonacci(n - 1) + Fibonacci(n - 2);
            }

            private static int Factorial(int n)
            {
                if (n <= 1) return 1;
                return n * Factorial(n - 1);
            }
        }
    }
}