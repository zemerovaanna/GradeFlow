using System.Windows;
using GradeFlowECTS.Analyzers.MDK01;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace GradeFlowECTS.View.Windows
{
    public partial class StudentMDK01Window : Window
    {
        private List<(byte Number, string TaskText)> _tasks;
        private (byte Number, string TaskText) _task;
        public StudentMDK01Window()
        {
            InitializeComponent();
            _tasks = new()
            {
                (1, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Вывести все содержащиеся в данном массиве нечетные числа в порядке возрастания их индексов, а также их количество K."),
                (2, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Вывести вначале все содержащиеся в данном массиве четные числа в порядке возрастания их индексов, а затем — все нечетные числа в порядке убывания их индексов."),
                (3, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Ввести с клавиатуры целые числа K и L (1 < K ≤ L ≤ N). Найти сумму всех элементов массива, кроме элементов с номерами от K до L включительно."),
                (4, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Ввести с клавиатуры целые числа K и L (1 < K ≤ L ≤ N). Найти среднее арифметическое всех элементов массива, кроме элементов с номерами от K до L включительно."),
                (5, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Найти номера тех элементов массива, которые больше своего правого соседа, и количество таких элементов. Найденные номера выводить в порядке их возрастания. Нельзя использовать существующие методы сортировки."),
                (6, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Найти номера тех элементов массива, которые больше своего левого соседа, и количество таких элементов. Найденные номера выводить в порядке их убывания. Нельзя использовать существующие методы сортировки."),
                (7, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Упорядочить его по возрастанию методом сортировки простым обменом («пузырьковой» сортировкой): просматривать массив, сравнивая его соседние элементы (A1 и A2, A2 и A3 и т. д.) и меняя их местами, если левый элемент пары больше правого; повторить описанные действия N − 1 раз. Для контроля за выполняемыми действиями выводить содержимое массива после каждого просмотра. Учесть, что при каждом просмотре количество анализируемых пар можно уменьшить на 1."),

                (8, "Запросить ввод М и N - размеры матрицы. Запросить ввод, где K - целое число (1 ≤ K ≤ M). Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Вывести элементы K-й строки данной матрицы."),
                (9, "Запросить ввод М и N - размеры матрицы. Запросить ввод, где K - целое число (1 ≤ K ≤ N). Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Вывести элементы K-го столбца данной матрицы."),

                (10, "Запросить ввод N - размер массива. Заполнить массив размера N с клавиатуры. Вывести все чётные числа в порядке возрастания их индексов, а затем все нечётные числа в порядке убывания их индексов."),
                (11, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Найти и вывести минимальный и максимальный элементы массива, а также их индексы (если таких элементов несколько, вывести первые встретившиеся)."),
                (12, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Ввести с клавиатуры целые числа K и L (1 ≤ K ≤ L ≤ N). Найти сумму всех элементов массива с номерами от K до L включительно."),
                (13, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Ввести число X. Вывести количество элементов массива, кратных X, и их значения."),
                (14, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Заменить все четные элементы массива на нули и вывести измененный массив."),
                (15, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Найти среднее арифметическое всех положительных элементов массива."),
                (16, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Сформировать новый массив, исключив из исходного все элементы, кратные 3, и вывести его."),
                (17, "Запросить ввод N – размер массива. Заполнить массив размера N с клавиатуры. Найти два наименьших элемента массива и вывести их значения и индексы."),

                (18, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести число K (1 ≤ K ≤ M). Найти и вывести сумму элементов K-й строки."),
                (19, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести число K (1 ≤ K ≤ N). Найти и вывести среднее арифметическое элементов K-го столбца."),
                (20, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти строку с наибольшей суммой элементов и вывести её номер и сумму."),
                (21, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Транспонировать матрицу (строки <-> столбцы) и вывести результат."),
                (22, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести числа K и L (1 ≤ K, L ≤ M). Поменять местами строки K и L, затем вывести измененную матрицу."),
                (23, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Ввести числа K и L (1 ≤ K, L ≤ N). Поменять местами столбцы K и L, затем вывести измененную матрицу."),
                (24, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Для каждого столбца найти и вывести максимальный элемент и его индекс строки."),
                (25, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти строку с максимальной суммой и строку с минимальной суммой."),
                (26, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Для каждой строки вывести количество положительных элементов."),
                (27, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти элемент, который является минимальным в своей строке. Вывести его значение и индексы."),
                (28, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Найти элемент, который является максимальным в своем столбце. Вывести его значение и индексы."),
                (29, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Поменять местами первую и последнюю строки матрицы и вывести результат."),
                (30, "Запросить ввод M и N – размеры матрицы. Заполнить матрицу с клавиатуры. Вывести полученные значения матрицы. Поменять местами первый и последний столбец матрицы и вывести результат."),
            };

            var random = new Random();
            int index = random.Next(_tasks.Count);
            _task = _tasks[index];
            TaskText.Text = $"{_task.Number}. " + _task.TaskText;
        }

        private string AnalyzeCode(string code, int taskNumber)
        {
            try
            {
                SyntaxTree tree = CSharpSyntaxTree.ParseText(code);
                var root = tree.GetRoot();

                switch (taskNumber)
                {
                    case 1:
                        return Task1Analyzer.Analyze(root);
                    case 2:
                        return Task2Analyzer.Analyze(root);
                    case 3:
                        return Task3Analyzer.Analyze(root);
                    case 4:
                        return Task4Analyzer.Analyze(root);
                    case 5:
                        return Task5Analyzer.Analyze(code);
                    case 6:
                        return Task6Analyzer.Analyze(code);
                    case 7:
                        return Task7Analyzer.Analyze(code);
                    case 8:
                        return Task8Analyzer.Analyze(root);
                    case 9:
                        return Task9Analyzer.Analyze(root);
                    case 10:
                        return Task10Analyzer.Analyze(root);
                    case 11:
                        return Task11Analyzer.Analyze(root);
                    case 12:
                        return Task12Analyzer.Analyze(root);
                    case 13:
                        return Task13Analyzer.Analyze(root);
                    case 14:
                        return Task14Analyzer.Analyze(root);
                    case 15:
                        return Task15Analyzer.Analyze(root);
                    case 16:
                        return Task16Analyzer.Analyze(root);
                    case 17:
                        return Task17Analyzer.Analyze(root);
                    case 18:
                        return Task18Analyzer.Analyze(root);
                    case 19:
                        return Task19Analyzer.Analyze(root);
                    case 20:
                        return Task20Analyzer.Analyze(root);
                    case 21:
                        return Task21Analyzer.Analyze(root);
                    case 22:
                        return Task22Analyzer.Analyze(root);
                    case 23:
                        return Task23Analyzer.Analyze(root);
                    case 24:
                        return Task24Analyzer.Analyze(root);
                    case 25:
                        return Task25Analyzer.Analyze(root);
                    case 26:
                        return Task26Analyzer.Analyze(root);
                    case 27:
                        return Task27Analyzer.Analyze(root);
                    case 28:
                        return Task28Analyzer.Analyze(root);
                    case 29:
                        return Task29Analyzer.Analyze(root);
                    case 30:
                        return Task30Analyzer.Analyze(root);
                    default:
                        return "Неверный номер задания.";
                }
            }
            catch (Exception ex)
            {
                return "Ошибка анализа: " + ex.Message;
            }
        }

        private void CheckCode_Click(object sender, RoutedEventArgs e)
        {
            ResultOutput.Text = AnalyzeCode(CodeInput.Text, _task.Number);
        }
    }
}